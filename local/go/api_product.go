/*
 * EC
 *
 * EC API
 *
 * API version: 2023.1.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProductApiController binds http requests to an api service and writes the service results to the http response
type ProductApiController struct {
	service ProductApiServicer
	errorHandler ErrorHandler
}

// ProductApiOption for how the controller is set up.
type ProductApiOption func(*ProductApiController)

// WithProductApiErrorHandler inject ErrorHandler into controller
func WithProductApiErrorHandler(h ErrorHandler) ProductApiOption {
	return func(c *ProductApiController) {
		c.errorHandler = h
	}
}

// NewProductApiController creates a default api controller
func NewProductApiController(s ProductApiServicer, opts ...ProductApiOption) Router {
	controller := &ProductApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProductApiController
func (c *ProductApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteProductById",
			strings.ToUpper("Delete"),
			"/v1/products/{productId}",
			c.DeleteProductById,
		},
		{
			"GetProductById",
			strings.ToUpper("Get"),
			"/v1/products/{productId}",
			c.GetProductById,
		},
		{
			"GetProducts",
			strings.ToUpper("Get"),
			"/v1/products",
			c.GetProducts,
		},
	}
}

// DeleteProductById - Cancel a specified product
func (c *ProductApiController) DeleteProductById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam, err := parseInt64Parameter(params["productId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteProductById(r.Context(), productIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetProductById - Get a specified product
func (c *ProductApiController) GetProductById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	productIdParam, err := parseInt64Parameter(params["productId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetProductById(r.Context(), productIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetProducts - Get all products
func (c *ProductApiController) GetProducts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageSizeParam, err := parseInt32Parameter(query.Get("pageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	pageTokenParam := query.Get("pageToken")
	result, err := c.service.GetProducts(r.Context(), pageSizeParam, pageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
